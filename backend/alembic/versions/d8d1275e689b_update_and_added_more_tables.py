"""update_and_added_more_tables

Revision ID: d8d1275e689b
Revises: efe0340d96d6
Create Date: 2025-06-29 23:59:46.462437

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'd8d1275e689b'
down_revision: Union[str, Sequence[str], None] = 'efe0340d96d6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create ENUM type first
    userrole_enum = postgresql.ENUM('teacher', 'user', name='userrole')
    userrole_enum.create(op.get_bind())
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('class_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('difficulty_level', sa.String(length=50), nullable=True),
    sa.Column('base_price', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_class_types_id'), 'class_types', ['id'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('method', sa.String(length=50), nullable=True),
    sa.Column('transaction_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)
    op.create_table('schedules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('class_type_id', sa.Integer(), nullable=False),
    sa.Column('instructor_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['class_type_id'], ['class_types.id'], ),
    sa.ForeignKeyConstraint(['instructor_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_schedules_id'), 'schedules', ['id'], unique=False)
    op.add_column('bookings', sa.Column('schedule_id', sa.Integer(), nullable=False))
    op.create_foreign_key(None, 'bookings', 'schedules', ['schedule_id'], ['id'])
    op.drop_column('bookings', 'time')
    op.drop_column('bookings', 'yoga_type')
    op.drop_column('bookings', 'instructor')
    op.drop_column('bookings', 'date')
    op.add_column('users', sa.Column('role', sa.Enum('teacher', 'user', name='userrole'), nullable=True))
    op.add_column('users', sa.Column('image', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('phone', sa.String(length=15), nullable=True))
    op.add_column('users', sa.Column('bio', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('specialization', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('experience_years', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('ratings', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('price_per_session', sa.Float(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'price_per_session')
    op.drop_column('users', 'ratings')
    op.drop_column('users', 'experience_years')
    op.drop_column('users', 'specialization')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'phone')
    op.drop_column('users', 'image')
    op.drop_column('users', 'role')
    op.add_column('bookings', sa.Column('date', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('bookings', sa.Column('instructor', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('bookings', sa.Column('yoga_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('bookings', sa.Column('time', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_column('bookings', 'schedule_id')
    op.drop_index(op.f('ix_schedules_id'), table_name='schedules')
    op.drop_table('schedules')
    op.drop_index(op.f('ix_payments_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_class_types_id'), table_name='class_types')
    op.drop_table('class_types')
    
    # Drop the ENUM type last
    userrole_enum = postgresql.ENUM('teacher', 'user', name='userrole')
    userrole_enum.drop(op.get_bind())
    # ### end Alembic commands ###